The most secure and easy way to implement a singleton in java is by using
enums (like you mentioned):
	
public enum ClassName {
INSTANCE;
	
// fields, setters and getters
}
The enum semantics guarantees that there will be only one INSTANCE
	
If not using the enum approach, you must take care of quite a lot
aspects, like race conditions and reflection. I've been breaking
singletons of some frameworks, and abusing them, because they weren't
properly written. The enum guarantees no one will break it.
	
You should always use enums when a variable (especially a method
parameter) can only take one out of a small set of possible values.
Examples would be things like type constants (contract status:
"permanent", "temp", "apprentice"), or flags ("execute now", "defer
execution").
	
If you use enums instead of integers (or String codes), you increase
compile-time checking and avoid errors from passing in invalid constants,
and you document which values are legal to use.
	
BTW, overuse of enums might mean that your methods do too much (it's
often better to have several separate methods, rather than one method
that takes several flags which modify what it does), but if you have to
use flags or type codes, enums are the way to go

