

1.併發程式設計三要素

 1. 原子性原子，即一個不可再被分割的顆粒。在Java中原子性指的是一個或多個操作要麼全部執行成功要麼全部執行失敗。
 2. 有序性程式執行的順序按照程式碼的先後順序執行。（處理器可能會對指令進行重排序）
 3. 可見性當多個執行緒訪問同一個變數時，如果其中一個執行緒對其作了修改，其他執行緒能立即獲取到最新的值。


問題1：庫存超賣

只有10個庫存，但是一秒鐘有1k個訂單，怎麼能不超賣呢?

核心思想就是保證庫存遞減是原子性操作，10--返回9，9--返回8，8--返回7。

而不能是讀取出來庫存10，10-1=9再更新回去。因為這個讀取和更新是並發執行的，
很可能就會有1k個訂單都成功了，而庫存實際只有10。

那麼，怎麼保證原子性操作呢?

1. 資料庫：

update product set left_numleft_num=left_num-1 where left_num>0;
資料庫性能較差，不建議使用。

2. 分布式鎖

用redis來做一個分布式鎖，reids->setnx(lock, 1) 設置一個鎖，程序執行完成再del這個鎖。

鎖定的過程，不利於並發執行，大家都在等待鎖解開，不建議使用。

3. 消息隊列

將訂單請求全部放入消息隊列，然後另外一個後台程序一個個處理隊列中的訂單請求。

並發不受影響，但是用戶等待的時間較長，進入隊列的訂單也會很多，體驗上並不好，也不建議使用。



4. redis遞減

通過 redis->incrby(product, -1) 得到遞減之後的庫存數。

性能方面很好，同時體驗上也很好，在PHP秒殺課程中，優化後就是用的這種方法，
而沒有使用上述其他方法，大家應該也能對比了解啦。




問題2：集群怎麼來規劃

前端伺服器因為沒有相互間關聯，集群的數量不受影響。

redis的性能可以達到每秒幾萬次響應，所以一個集群的規模，也就是redis服務可以承載的數量。

比如：一台前端伺服器是1~2k的qps(有庫存時)，那麼10台+1台redis就可以是一個獨立的集群，可以支撐1~2w每秒訂單量。

10個上述的集群就可以做到一秒鐘處理10w~20w的有效訂單。

如果秒殺活動的庫存量在1w以內，預計參與的人數在百萬左右，那麼有一個集群也就可以搞定。

如果秒殺參與的人數超過千萬，那麼就要用到不止一個集群了。






問題3：多個集群的數據怎麼保持一致性

不要做多集群的數據同步，而是用散列，每個集群的數據是獨立存在的。

假設，有10個商品，每個商品有1w庫存，規劃用10個集群，那麼每個集群有10個商品，每個商品是1k庫存。

每個集群只需要負責把自己的庫存賣掉即可，至於說，會不會有用戶知道有10個集群，然後每個集群都去搶。

這種情況就不要用程序來處理了，利用運營規則，活動結束後匯總訂單的時候再去處理就好了。

如果擔心散列的不合理，比如：某個集群用戶訪問量特別少，那麼可以引入一個中控服務，來監控各個集群的庫存，然後再做平衡。






