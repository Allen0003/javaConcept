
Q: Double click     
A: adding uuid in the front-end

Q: java finalize

A: the finalize method provided by the root Object class.

Simply put, this is called before the garbage collection for a particular object.


Q: Implement tree map 

A: A TreeMap is sorted by keys so that you need to implement 'compareTo' method.



Q: Memory leak 

A: The standard definition of a memory leak is a scenario that occurs when objects are no longer being used by the application, but the Garbage Collector is unable to remove them from working memory – because they’re still being referenced. As a result, the application consumes more and more resources – which eventually leads to a fatal OutOfMemoryError.


An advantageous technique to understand these situations is to make reproducing a memory leak easier by setting a lower size for the Heap. That’s why, when starting our application, we can adjust the JVM to suit our memory needs:

Example:

private Random random = new Random();
public static final ArrayList<Double> list = new ArrayList<Double>(1000000);

@Test
public void givenStaticField_whenLotsOfOperations_thenMemoryLeak() throws InterruptedException {
    for (int i = 0; i < 1000000; i++) {
        list.add(random.nextDouble());
    }
    
    System.gc();
    Thread.sleep(10000); // to allow GC do its job
}

We created our ArrayList as a static field – which will never be collected by the JVM Garbage Collector during the lifetime of the JVM process, even after the calculations it was used for are done. We also invoked Thread.sleep(10000) to allow the GC to perform a full collection and try to reclaim everything that can be reclaimed.

Q: How to prevent it?

First, we need to pay close attention to our usage of static; declaring any collection or heavy object as static ties its lifecycle to the lifecycle of the JVM itself, and makes the entire object graph impossible to collect.




Q: java spring ioc and dependency injection

A: Inversion of Control is the same with dependency injection
 
Inversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework. It's most often used in the context of object-oriented programming.

Also, there are three types of ioc
1. interface injection
2. setting injection
3. constructor injection
example 2 is the first one 

type 2 should rely on bean


example 1:

@Configuration
class AppConfig {
  @Bean
  public Bar bar() { return new Bar(); }

  @Bean
  public Foo foo() { return new Foo(bar()); }
}

@Configuration
class AppConfig {
  @Bean
  public Bar bar() { return new Bar(); }

  @Bean
  public Foo foo() {
    Foo foo = new Foo();
    foo.setBar(bar());

    return foo;
  }
}


example 2:


public class Driver {

    private Car car;

    public Driver () {}

    public Driver (Car car) {
        this.car = car;
    }

    public void drive(){
        car.startRunning();
    }

    public void setCar(Car car) {
        this.car = car;
    }
}


public class Test {
    public static void main(String[] args) {
        Driver driver = new Driver();

        driver.setCar(new BMW());   

        driver.drive();

        driver.setCar(new Benz());  

        driver.drive();

    }
}



Q: String vs StringBuffer vs StringBuilder


A: Since String is immutable in Java, whenever we do String manipulation like concatenation, substring etc, it generates a new String and discards the older String for garbage collection.

These are heavy operations and generate a lot of garbage in heap. So Java has provided StringBuffer and StringBuilder class that should be used for String manipulation.

StringBuffer and StringBuilder are mutable objects in java and provide append(), insert(), delete() and substring() methods for String manipulation.


*** StringBuffer is thread safe and synchronized whereas StringBuilder is not, thats why StringBuilder is more faster than StringBuffer.

*** For String manipulations in non-multi threaded environment, we should use StringBuilder else use StringBuffer class.




Q: J2ee

A: Servlets JSP

Q: Java2EE Session

A: just session nothing too special


Q: One-to-One, One-to-Many Table Relationships in SQL Server

A: 1. One-to-One (1-1) relationship is defined as the relationship between two tables where both the tables should be associated with each other based on only one matching row. 
   This relationship can be created using Primary key-Unique foreign key constraints.
   EX: a person can have only one passport. Let’s implement this in SQL Server.

   2. The One-to-Many relationship is defined as a relationship between two tables where a row from one table can have multiple matching rows in another table. 
   This relationship can be created using Primary key-Foreign key relationship.
   EX:  a book can have multiple authors. Let’s implement this in SQL Server.

   3. Many-to-many. Lastly, entities can also have a many-to-many relationship.
   Let’s say you have a list of books, and a list of authors—each book may have one or more authors, and each author may have written multiple books.   




